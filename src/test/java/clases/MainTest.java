/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package clases;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.InputStream;
import java.io.PrintStream;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.List;
import java.util.Scanner;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.MethodOrderer.MethodName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;

import com.thoughtworks.qdox.JavaDocBuilder;
import com.thoughtworks.qdox.model.JavaSource;

import clases.helpers.Aleatorios;
import ud05arrays.Ud5Ejercicio1;
import ud05arrays.Ud5Ejercicio2;
import ud05arrays.Virus;

/**
 * Esta clase esta preparada para testear el programa main principal de un proyecto
 * interceptando y suplantando tando la entrada como la salida estandar teclado
 * y pantalla
 * @author eserrano
 *
 */
@TestMethodOrder(MethodName.class)
class MainTest {
	
	private final PrintStream standardOut = System.out;
	private final ByteArrayOutputStream outputStreamCaptor = new ByteArrayOutputStream();
	
	
	@BeforeEach
	void setUp() {
	    System.setOut(new PrintStream(outputStreamCaptor));
	}
	
	@Test
	@DisplayName("Compilación")
	/**
	 * Compila y se pueden establecer reglas basicas,
	 * Por ejemplo impedir la importación de ciertas clases 
	 */
	void test00RequisitosBasicos() {
		assertTrue(true);
	}
	
	@Test
	@DisplayName("Crear Virus")
	/**
	 * toString
	 */
	void test01() {
		
		prohibidoArrays();
		
		int rows= Aleatorios.numeroAleatorio(5, 50);
		Object [][] datos = arrayVirus(rows); 
			
		Virus [] array = Ud5Ejercicio1.crearArrayVirus(datos);
		
		assertEquals(datos.length, array.length);
		
		for(int i=0;i<datos.length;i++) {
			Object [] fs = datos[i];
			Virus ref = new Virus((String)fs[0],(Integer)fs[1],(Float)fs[2]);
			assertEquals(ref, array[i]);
		}
		
	}
	
	private Object [][] arrayVirus(int rows){
		Object [][] array = new Object[rows][3];
		
		for (int i = 0; i < array.length; i++) {
			Object[] fs = array[i];
			fs[0] = Aleatorios.cadenaAleatoria(3, 6);
			fs[1] = Aleatorios.numeroAleatorio(1, 12);
			fs[2] = Aleatorios.numeroAleatorio(0f, 0.999999999f);
		}
		return array;
	}
	
	@Test
	@DisplayName("Imprimir Array Virus")
	/**
	 * toString
	 */
	void test02() {

		prohibidoArrays();

		int s = Aleatorios.numeroAleatorio(8, 15);
		Virus [] array = new Virus[s];
		
		for (int i = 0; i < array.length; i++)
			array[i]=new Virus(Aleatorios.cadenaAleatoria(3, 6),Aleatorios.numeroAleatorio(1, 12),Aleatorios.numeroAleatorio(0f, 0.999999999f));
		
		String titulo = Aleatorios.cadenaAleatoria(5, 8);
		
		Ud5Ejercicio1.imprimeVirus(array, titulo, true);
		Ud5Ejercicio1.imprimeVirus(array, titulo, false);
		
		InputStream salida = new ByteArrayInputStream(outputStreamCaptor.toByteArray());
		Scanner lectorSalida = new Scanner(salida);
				
		int lines=0;
		assertEquals(lectorSalida.nextLine(), titulo + ": --------------------");
		lines++;
		
		for (int i = 0; i < array.length; i+=2) {
			assertEquals(lectorSalida.nextLine(), array[i].toString());
			lines++;
		}
		assertEquals(lectorSalida.nextLine(), "-----------------------------");
		lines++;
		
		assertEquals(lectorSalida.nextLine(), titulo + ": --------------------");
		lines++;
		
		for (int i = 1; i < array.length; i+=2) {
			assertEquals(lectorSalida.nextLine(), array[i].toString());
			lines++;
		}
		assertEquals(lectorSalida.nextLine(), "-----------------------------");
		lines++;
		
		lectorSalida.close();
		assertEquals(array.length+4,lines);
	}
	
	
	@Test
	@DisplayName("Orden Ascendente")
	/**
	 * toString
	 */
	void test03() {
		
		prohibidoArrays();

		int s = Aleatorios.numeroAleatorio(8, 15);
		
		Virus [] array = arrayVirusAleatorio(s);
				
		Virus [] b = array.clone();
		
		Virus [] ordenado = Ud5Ejercicio1.ordena(array);
		//El contenido de array no ha sido modificado
		assertTrue(Arrays.deepEquals(b, array));
		//El array devuelto es diferente
		assertNotEquals(ordenado, array);
		//El array está ordenado
		assertTrue(isOrdered(ordenado, true) || isOrdered(ordenado, false));
		
		array = arrayVirusFijo();
		
		b= array.clone();
		
		ordenado = Ud5Ejercicio1.ordena(array);
		//El contenido de array no ha sido modificado
		assertTrue(Arrays.deepEquals(b, array));
		//El array devuelto es diferente
		assertNotEquals(ordenado, array);
		//El array está ordenado
		assertTrue(isOrdered(ordenado, true) || isOrdered(ordenado, false));
	}
	
	boolean isOrdered(Comparable [] array, boolean asc) {
		if(array!=null && array.length>1) {
			if(asc) {
				for (int i = 0; i < array.length-1; i++) {
					if(array[i].compareTo(array[i+1])<0)
						return false;
				}
			}
			else {
				for (int i = 0; i < array.length-1; i++) {
					if(array[i].compareTo(array[i+1])>0)
						return false;
				}
			}
		}
		
		return true;
	}
	
	@Test
	@DisplayName("Eliminacion elementos")
	/**
	 * toString
	 */
	void test04() {
		
		prohibidoArrays();
		
		compruebaEliminadoAleatorio();
		compruebaEliminadoFijo();
			
	}
	
	private void compruebaEliminadoAleatorio() {
		int s = Aleatorios.numeroAleatorio(8, 15);
		
		Virus [] array = arrayVirusAleatorio(s);
		
		int num = Aleatorios.numeroAleatorio(0, s);
		
		Virus target = array[num];
				
		Virus [] copia = Ud5Ejercicio1.eliminaVirus(target, array);
		
		assertNotEquals(copia, array);
		assertEquals(copia.length,array.length);
		//List<Virus> list = Arrays.asList(copia);
		
		//El elemento se ha eliminado
		int nulls=0;
		for (Virus virus : copia) {
			if(virus!=null)
				assertTrue(!virus.equals(target));
			else
				nulls++;
		}
		
		//La nueva organización interna es correcta
		for(int i=0;i<copia.length;i++) {
			if(i<copia.length-nulls)
				assertTrue(copia[i]!=null);
			else
				assertTrue(copia[i]==null);
		}
	}
	
	private void compruebaEliminadoFijo() {
		
		Virus [] array = arrayVirusFijoConDuplicados();
		
		int num = Aleatorios.numeroAleatorio(0, array.length-3);
		
		Virus target = array[num];
				
		Virus [] copia = Ud5Ejercicio1.eliminaVirus(target, array);
		
		assertNotEquals(copia, array);
		assertEquals(copia.length,array.length);
		//List<Virus> list = Arrays.asList(copia);
		
		//El elemento se ha eliminado
		int nulls=0;
		for (Virus virus : copia) {
			if(virus!=null)
				assertTrue(!virus.equals(target));
			else
				nulls++;
		}
		
		assertEquals(4, nulls);
		
		//La nueva organización interna es correcta
		for(int i=0;i<copia.length;i++) {
			if(i<copia.length-nulls)
				assertTrue(copia[i]!=null);
			else
				assertTrue(copia[i]==null);
		}
	}
	
	@Test
	@DisplayName("Encuentra Peligrosos")
	/**
	 * toString
	 */
	void test05() {
		
		prohibidoArrays();
		
		Virus [] fijo = arrayVirusFijo();
		
		//Caso 1
		Virus muestra = new Virus("indefenso",1,0.00000001f);
		
		int [] peligrosos = Ud5Ejercicio1.encuentraPeligrosos(muestra, fijo);
		
		assertEquals(fijo.length, peligrosos.length);
		
		for(int i=0;i<peligrosos.length;i++)
			assertEquals(i, peligrosos[i]);
		
		//Caso 2
		muestra = new Virus("Locura",16,1f);
		
		peligrosos = Ud5Ejercicio1.encuentraPeligrosos(muestra, fijo);
		
		assertTrue(peligrosos==null);
		
		//Caso 3
		muestra = new Virus("Medio",7,0.00015f);
		
		peligrosos = Ud5Ejercicio1.encuentraPeligrosos(muestra, fijo);
		
		assertEquals(4, peligrosos.length);
		
		List<Integer> mp = new LinkedList<Integer>(Arrays.asList(4,2,0,1));
		
		for(int i=0;i<peligrosos.length;i++)
			assertTrue(mp.remove((Integer)peligrosos[i]));
		
		assertTrue(mp.isEmpty());
	}

	@Test
	@DisplayName("Expresion regular nuevo DNI")
	/**
	 * toString
	 */
	void test06() {
		
		String er = Ud5Ejercicio2.validaDNI();
		assertTrue("9876543211AB".matches(er));
		assertTrue(!"9876543211A".matches(er));
		assertTrue(!"9876543211A2".matches(er));
		assertTrue(!"9876543211ABC".matches(er));
		assertTrue(!"987654321AB".matches(er));
		assertTrue(!"987654321-AB".matches(er));
		assertTrue(!"AB".matches(er));
		assertTrue(!"3216547897".matches(er));
		assertTrue(!"9876543211aB".matches(er));
		assertTrue(!"A876543211AB".matches(er));
	}
	
	@Test
	@DisplayName("Valida Enumerado")
	/**
	 * toString
	 */
	void test07() {
	
		String er = Ud5Ejercicio2.validaCampoEnumerado();
		assertTrue("perro".matches(er));
		assertTrue("PERRO".matches(er));
		assertTrue("gato".matches(er));
		assertTrue("GATO".matches(er));
		assertTrue("tortuga".matches(er));
		assertTrue("TORTUGA".matches(er));
		assertTrue("loro".matches(er));
		assertTrue("LORO".matches(er));
		
		assertTrue(!"pErro".matches(er));
		assertTrue(!"PerRO".matches(er));
		assertTrue(!"gaTo".matches(er));
		assertTrue(!"GATo".matches(er));
		assertTrue(!"torTuga".matches(er));
		assertTrue(!"TOrTUGA".matches(er));
		assertTrue(!"lOro".matches(er));
		assertTrue(!"lORO".matches(er));
		
		assertTrue(!"coquina".matches(er));
		assertTrue(!"PERR0".matches(er));
		assertTrue(!"gaT0".matches(er));
		assertTrue(!"gatoo".matches(er));
		assertTrue(!"ttortuga".matches(er));
		assertTrue(!"TORTUGAS".matches(er));
		assertTrue(!"loro1".matches(er));
		assertTrue(!"1LORO".matches(er));
		

		assertTrue(!"".matches(er));
		
	}
	
	@AfterEach
	void tearDown() {
	    System.setOut(standardOut);
	}
	
	void prohibidoArrays() {
		String fileFullPath = "src/main/java/ud05arrays/Ud5Ejercicio1.java";
		compruebaProhibido(fileFullPath, "Arrays");
	}
	
	void compruebaProhibido(String classFullPath, String classForbidden) {
        JavaDocBuilder builder = new JavaDocBuilder();
        try {
			builder.addSource(new FileReader( classFullPath  ));
		} catch (FileNotFoundException e) {
			e.printStackTrace();
			assertTrue(false);
		}

        JavaSource src = builder.getSources()[0];
        String[] imports = src.getImports();

        for ( String imp : imports )
        {
            if(imp.endsWith("."+ classForbidden)) {
            	print("Prohibido importar " + classForbidden + " en la clase " + classFullPath );
            	assertTrue(false);
            }
            if( imp.endsWith(".*")) {
            	print("Prohibido importar con .*" + " en la clase " + classFullPath );
            	assertTrue(false);
            }
        }
        
        String sc = src.getCodeBlock();
        
        Pattern pattern = Pattern.compile(classForbidden + "\\.");
        Matcher matcher = pattern.matcher(sc);
        if(matcher.find()) {
        	print("Prohibido referenciar " + classForbidden + " en la clase " + classFullPath );
        	assertTrue(false);
        }
	}
	
	private Virus[] arrayVirusAleatorio(int rows) {
		Object [][] datos = arrayVirus(rows); 
			
		Virus [] array = new Virus[rows];
				
		for(int i=0;i<datos.length;i++) {
			Object [] fs = datos[i];
			Virus ref = new Virus((String)fs[0],(Integer)fs[1],(Float)fs[2]);
			array[i]=ref;
		}
		
		return array;
	}
	
	private Virus[] arrayVirusFijo() {			
		Virus [] array = new Virus[5];
		int i=0;
		array[i++]= new Virus("Coronavirus",3,0.125f);
		array[i++]= new Virus("Sarampión",12,0.0001f);
		array[i++]= new Virus("Viruela", 7,0.00015f);
		array[i++]= new Virus("Paperas",4,0.00001f);
		array[i++]= new Virus("Ébola",2,0.199f);
		
		return array;
	}
	
	private Virus[] arrayVirusFijoConDuplicados() {			
		Virus [] array = new Virus[12];
		int i=0;
		array[i++]= new Virus("Coronavirus",3,0.125f);
		array[i++]= new Virus("Sarampión",12,0.0001f);
		array[i++]= new Virus("Viruela", 7,0.00015f);
		array[i++]= new Virus("Paperas",4,0.00001f);
		array[i++]= new Virus("Ébola",2,0.199f);
		array[i++]= new Virus("Coronavirus",3,0.125f);
		array[i++]= new Virus("Sarampión",12,0.0001f);
		array[i++]= new Virus("Viruela", 7,0.00015f);
		array[i++]= new Virus("Paperas",4,0.00001f);
		array[i++]= new Virus("Ébola",2,0.199f);
		array[i++]=null;
		array[i++]=null;
		
		return array;
	}
	
	void print(Object message) {
		this.standardOut.println(message);
	}

}